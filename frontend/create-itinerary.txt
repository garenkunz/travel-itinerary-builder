import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useItineraryGenerator } from '../hooks/useItineraryGenerator';
import { MapPin, Calendar, DollarSign, Clock, ArrowLeft } from 'lucide-react';
import axios from 'axios';

const CreateItinerary = () => {
  const navigate = useNavigate();
  const [step, setStep] = useState(1);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const { generateItinerary, isGenerating, error: generationError } = useItineraryGenerator();
  
  // Form data
  const [formData, setFormData] = useState({
    destination: '',
    startDate: '',
    endDate: '',
    budget: '',
    interests: [],
    pace: 'Balanced'
  });
  
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData({
      ...formData,
      [name]: value
    });
  };
  
  const handleInterestChange = (interest) => {
    if (formData.interests.includes(interest)) {
      setFormData({
        ...formData,
        interests: formData.interests.filter(item => item !== interest)
      });
    } else {
      setFormData({
        ...formData,
        interests: [...formData.interests, interest]
      });
    }
  };
  
  const handlePaceChange = (pace) => {
    setFormData({
      ...formData,
      pace
    });
  };
  
  const validateStep1 = () => {
    if (!formData.destination.trim()) {
      setError('Please enter a destination');
      return false;
    }
    
    if (!formData.startDate) {
      setError('Please select a start date');
      return false;
    }
    
    if (!formData.endDate) {
      setError('Please select an end date');
      return false;
    }
    
    const start = new Date(formData.startDate);
    const end = new Date(formData.endDate);
    
    if (end < start) {
      setError('End date cannot be before start date');
      return false;
    }
    
    setError(null);
    return true;
  };
  
  const validateStep2 = () => {
    if (formData.interests.length === 0) {
      setError('Please select at least one interest');
      return false;
    }
    
    setError(null);
    return true;
  };
  
  const nextStep = () => {
    if (step === 1 && validateStep1()) {
      setStep(2);
    } else if (step === 2 && validateStep2()) {
      setStep(3);
    }
  };
  
  const prevStep = () => {
    setStep(step - 1);
  };
  
const handleSubmit = async (e) => {
  e.preventDefault();
  
  if (!validateStep2()) {
    return;
  }
  
  setLoading(true);
  setError(null);
  
  try {
    // Call the generator function from the hook
    const newItinerary = await generateItinerary(formData);
    
    if (newItinerary) {
      // Navigate to the newly created itinerary
      navigate(`/itinerary/${newItinerary._id}`);
    } else {
      // If no itinerary was returned but no error was thrown
      setError('Failed to generate itinerary. Please try again.');
    }
    
    setLoading(false);
  } catch (err) {
    setLoading(false);
    setError(err.message || 'An error occurred. Please try again.');
  }
};
  
  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow-sm">
        <div className="container mx-auto px-4 py-4 flex justify-between items-center">
          <div className="flex items-center">
            <span className="text-2xl font-bold bg-gradient-to-r from-[#4d7b93] to-[#8351a8] text-transparent bg-clip-text">WanderPlan</span>
          </div>
          <nav>
            <ul className="flex space-x-6">
              <li><a href="/dashboard" className="text-gray-600 hover:text-[#4d7b93] transition">My Itineraries</a></li>
              <li><a href="/account" className="text-gray-600 hover:text-[#4d7b93] transition">Account</a></li>
            </ul>
          </nav>
        </div>
      </header>
      
      <main className="container mx-auto px-4 py-8">
        <button 
          onClick={() => navigate('/dashboard')}
          className="flex items-center text-gray-600 hover:text-gray-800 mb-6 transition"
        >
          <ArrowLeft size={18} className="mr-2" />
          Back to Dashboard
        </button>
        
        <div className="bg-white rounded-lg shadow-md p-6 max-w-3xl mx-auto">
          <h1 className="text-2xl font-bold mb-6">Create Your Perfect Itinerary</h1>
          
          {/* Progress Steps */}
          <div className="flex mb-8">
            <div className="flex flex-col items-center flex-1">
              <div className={`w-8 h-8 rounded-full flex items-center justify-center ${step >= 1 ? 'bg-[#4d7b93] text-white' : 'bg-gray-200 text-gray-600'}`}>
                1
              </div>
              <span className="text-sm mt-2">Destination</span>
            </div>
            <div className="flex-1 flex items-center">
              <div className={`h-1 w-full ${step >= 2 ? 'bg-[#4d7b93]' : 'bg-gray-200'}`}></div>
            </div>
            <div className="flex flex-col items-center flex-1">
              <div className={`w-8 h-8 rounded-full flex items-center justify-center ${step >= 2 ? 'bg-[#4d7b93] text-white' : 'bg-gray-200 text-gray-600'}`}>
                2
              </div>
              <span className="text-sm mt-2">Preferences</span>
            </div>
            <div className="flex-1 flex items-center">
              <div className={`h-1 w-full ${step >= 3 ? 'bg-[#4d7b93]' : 'bg-gray-200'}`}></div>
            </div>
            <div className="flex flex-col items-center flex-1">
              <div className={`w-8 h-8 rounded-full flex items-center justify-center ${step >= 3 ? 'bg-[#4d7b93] text-white' : 'bg-gray-200 text-gray-600'}`}>
                3
              </div>
              <span className="text-sm mt-2">Generate</span>
            </div>
          </div>
          
          {/* Error Message */}
          {error && (
            <div className="bg-red-50 text-red-500 p-3 rounded-md mb-6">
              {error}
            </div>
          )}
          
          <form onSubmit={handleSubmit}>
            {/* Step 1: Destination and Dates */}
            {step === 1 && (
              <div>
                <div className="mb-6">
                  <label className="block text-gray-700 mb-2 font-medium">Destination</label>
                  <div className="relative">
                    <MapPin className="absolute left-3 top-3 text-gray-400" size={20} />
                    <input
                      type="text"
                      name="destination"
                      value={formData.destination}
                      onChange={handleInputChange}
                      placeholder="Where are you going?"
                      className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#4d7b93]"
                    />
                  </div>
                </div>
                
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                  <div>
                    <label className="block text-gray-700 mb-2 font-medium">Start Date</label>
                    <div className="relative">
                      <Calendar className="absolute left-3 top-3 text-gray-400" size={20} />
                      <input
                        type="date"
                        name="startDate"
                        value={formData.startDate}
                        onChange={handleInputChange}
                        className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#4d7b93]"
                      />
                    </div>
                  </div>
                  <div>
                    <label className="block text-gray-700 mb-2 font-medium">End Date</label>
                    <div className="relative">
                      <Calendar className="absolute left-3 top-3 text-gray-400" size={20} />
                      <input
                        type="date"
                        name="endDate"
                        value={formData.endDate}
                        onChange={handleInputChange}
                        className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#4d7b93]"
                      />
                    </div>
                  </div>
                </div>
                
                <div className="mb-6">
                  <label className="block text-gray-700 mb-2 font-medium">Budget (Optional)</label>
                  <div className="relative">
                    <DollarSign className="absolute left-3 top-3 text-gray-400" size={20} />
                    <input
                      type="number"
                      name="budget"
                      value={formData.budget}
                      onChange={handleInputChange}
                      placeholder="Your approximate budget"
                      className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#4d7b93]"
                    />
                  </div>
                  <p className="text-sm text-gray-500 mt-1">Leave blank if you don't have a specific budget</p>
                </div>
                
                <div className="flex justify-end">
                  <button
                    type="button"
                    onClick={nextStep}
                    className="bg-[#4d7b93] text-white px-6 py-2 rounded-md hover:bg-[#3c6175] transition"
                  >
                    Next
                  </button>
                </div>
              </div>
            )}
            
            {/* Step 2: Interests and Pace */}
            {step === 2 && (
              <div>
                <div className="mb-6">
                  <label className="block text-gray-700 mb-2 font-medium">Interests</label>
                  <p className="text-sm text-gray-500 mb-3">Select all that apply</p>
                  
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
                    {['Food', 'History', 'Outdoors', 'Nightlife', 'Culture', 'Family-friendly', 'Relaxation', 'Shopping', 'Adventure', 'Arts'].map((interest) => (
                      <div 
                        key={interest}
                        onClick={() => handleInterestChange(interest)}
                        className={`cursor-pointer border rounded-md px-4 py-3 text-center transition ${
                          formData.interests.includes(interest) 
                            ? 'bg-[#4d7b93] text-white border-[#4d7b93]' 
                            : 'border-gray-300 hover:border-[#4d7b93]'
                        }`}
                      >
                        {interest}
                      </div>
                    ))}
                  </div>
                </div>
                
                <div className="mb-8">
                  <label className="block text-gray-700 mb-2 font-medium">Preferred Pace</label>
                  <p className="text-sm text-gray-500 mb-3">How packed do you want your days to be?</p>
                  
                  <div className="grid grid-cols-3 gap-3">
                    {['Relaxed', 'Balanced', 'Ambitious'].map((pace) => (
                      <div 
                        key={pace}
                        onClick={() => handlePaceChange(pace)}
                        className={`cursor-pointer border rounded-md px-4 py-3 text-center transition ${
                          formData.pace === pace 
                            ? 'bg-[#8351a8] text-white border-[#8351a8]' 
                            : 'border-gray-300 hover:border-[#8351a8]'
                        }`}
                      >
                        <div className="font-medium">{pace}</div>
                        <div className="text-xs mt-1">
                          {pace === 'Relaxed' && 'Fewer activities, more downtime'}
                          {pace === 'Balanced' && 'Mix of activities and free time'}
                          {pace === 'Ambitious' && 'Packed days, maximum experiences'}
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
                
                <div className="flex justify-between">
                  <button
                    type="button"
                    onClick={prevStep}
                    className="border border-gray-300 text-gray-700 px-6 py-2 rounded-md hover:bg-gray-50 transition"
                  >
                    Back
                  </button>
                  <button
                    type="button"
                    onClick={nextStep}
                    className="bg-[#4d7b93] text-white px-6 py-2 rounded-md hover:bg-[#3c6175] transition"
                  >
                    Next
                  </button>
                </div>
              </div>
            )}
            
            {/* Step 3: Summary and Generate */}
            {step === 3 && (
              <div>
                <h2 className="text-xl font-semibold mb-4">Trip Summary</h2>
                
                <div className="bg-gray-50 rounded-lg p-4 mb-6">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <p className="text-gray-500 text-sm">Destination</p>
                      <p className="font-medium">{formData.destination}</p>
                    </div>
                    <div>
                      <p className="text-gray-500 text-sm">Dates</p>
                      <p className="font-medium">
                        {new Date(formData.startDate).toLocaleDateString()} - {new Date(formData.endDate).toLocaleDateString()}
                      </p>
                    </div>
                    {formData.budget && (
                      <div>
                        <p className="text-gray-500 text-sm">Budget</p>
                        <p className="font-medium">${formData.budget}</p>
                      </div>
                    )}
                    <div>
                      <p className="text-gray-500 text-sm">Pace</p>
                      <p className="font-medium">{formData.pace}</p>
                    </div>
                  </div>
                  
                  <div className="mt-4">
                    <p className="text-gray-500 text-sm">Interests</p>
                    <div className="flex flex-wrap gap-2 mt-1">
                      {formData.interests.map((interest, index) => (
                        <span 
                          key={index}
                          className="bg-[#4d7b93]/10 text-[#4d7b93] text-sm px-2 py-1 rounded-md"
                        >
                          {interest}
                        </span>
                      ))}
                    </div>
                  </div>
                </div>
                
                <div className="bg-[#8351a8]/10 rounded-lg p-4 mb-6">
                  <div className="flex items-start">
                    <Clock className="text-[#8351a8] mt-1 mr-3" size={20} />
                    <div>
                      <p className="font-medium text-[#8351a8]">AI-Powered Itinerary Generation</p>
                      <p className="text-sm text-gray-600">
                        Our AI will create a detailed day-by-day itinerary based on your preferences. This might take a minute or two.
                      </p>
                    </div>
                  </div>
                </div>
                
                <div className="flex justify-between">
                  <button
                    type="button"
                    onClick={prevStep}
                    className="border border-gray-300 text-gray-700 px-6 py-2 rounded-md hover:bg-gray-50 transition"
                    disabled={loading}
                  >
                    Back
                  </button>
                  <button
                    type="submit"
                    className="bg-[#b45dbb] text-white px-8 py-2 rounded-md hover:bg-[#9c4ea0] transition flex items-center"
                    disabled={loading}
                  >
                    {loading ? (
                      <>
                        <div className="animate-spin rounded-full h-5 w-5 border-2 border-white border-t-transparent mr-2"></div>
                        Generating...
                      </>
                    ) : (
                      'Generate Itinerary'
                    )}
                  </button>
                </div>
              </div>
            )}
          </form>
        </div>
      </main>
    </div>
  );
};

export default CreateItinerary;
