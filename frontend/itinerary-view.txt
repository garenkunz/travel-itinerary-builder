import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { MapPin, Calendar, DollarSign, Clock, ArrowLeft, Edit, Trash2, Download, Share2, Plus, X, RefreshCw } from 'lucide-react';
import axios from 'axios';
import { format } from 'date-fns';
import MapView from './MapView';
import { useItineraryGenerator } from '../hooks/useItineraryGenerator';

const ItineraryView = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  
  const [itinerary, setItinerary] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [subscription, setSubscription] = useState('free');
  const [activeDay, setActiveDay] = useState(0);
  const [editMode, setEditMode] = useState(false);
  const [editedActivity, setEditedActivity] = useState(null);
  
  useEffect(() => {
    // Fetch itinerary data
    const fetchItinerary = async () => {
      try {
        const token = localStorage.getItem('token');
        if (!token) {
          navigate('/login');
          return;
        }
        
        const res = await axios.get(`/api/itineraries/${id}`, {
          headers: {
            Authorization: `Bearer ${token}`
          }
        });
        
        setItinerary(res.data.data.itinerary);
        setLoading(false);
        
        // Get subscription status
        const subscriptionRes = await axios.get('/api/payments/subscription', {
          headers: {
            Authorization: `Bearer ${token}`
          }
        });
        
        setSubscription(subscriptionRes.data.data.subscription);
      } catch (error) {
        setLoading(false);
        
        if (error.response && error.response.data) {
          setError(error.response.data.message);
        } else {
          setError('An error occurred. Please try again.');
        }
        
        if (error.response && error.response.status === 401) {
          navigate('/login');
        }
      }
    };
    
    fetchItinerary();
  }, [id, navigate]);
  
  const handleDownload = async () => {
    try {
      // This would be implemented with a PDF generation service
      // For now, just show an alert
      alert('PDF download functionality would be implemented here');
    } catch (error) {
      console.error('Error downloading itinerary:', error);
    }
  };
  
  const handleShare = async () => {
    try {
      const token = localStorage.getItem('token');
      
      const res = await axios.post(`/api/itineraries/${id}/share`, {}, {
        headers: {
          Authorization: `Bearer ${token}`
        }
      });
      
      // Copy link to clipboard
      navigator.clipboard.writeText(res.data.data.shareableLink);
      
      alert('Shareable link copied to clipboard!');
    } catch (error) {
      console.error('Error creating shareable link:', error);
    }
  };

  // Then in your component, add this near the other useState hooks:
  const { regenerateActivity, isGenerating } = useItineraryGenerator();

  // Replace the handleRegenerateActivity function with:
  const handleRegenerateActivity = async (dayIndex, activityIndex) => {
    try {
      if (subscription !== 'premium') {
        alert('Activity regeneration is a premium feature. Please upgrade to access it.');
        return;
      }
      
      const updatedActivity = await regenerateActivity(id, dayIndex, activityIndex);
      
      if (updatedActivity) {
        // Update the activity in the itinerary
        const updatedItinerary = { ...itinerary };
        updatedItinerary.days[dayIndex].activities[activityIndex] = updatedActivity;
        setItinerary(updatedItinerary);
      }
    } catch (error) {
      console.error('Error regenerating activity:', error);
      alert('Failed to regenerate activity. Please try again.');
    }
  };
  
  const handleEditActivity = (dayIndex, activityIndex) => {
    setEditedActivity({
      dayIndex,
      activityIndex,
      ...itinerary.days[dayIndex].activities[activityIndex]
    });
    setEditMode(true);
  };
  
  const handleSaveActivity = async () => {
    try {
      const { dayIndex, activityIndex, ...activityData } = editedActivity;
      
      const updatedItinerary = { ...itinerary };
      updatedItinerary.days[dayIndex].activities[activityIndex] = activityData;
      
      const token = localStorage.getItem('token');
      
      await axios.put(`/api/itineraries/${id}`, {
        days: updatedItinerary.days
      }, {
        headers: {
          Authorization: `Bearer ${token}`
        }
      });
      
      setItinerary(updatedItinerary);
      setEditMode(false);
      setEditedActivity(null);
    } catch (error) {
      console.error('Error saving activity:', error);
      
      if (error.response && error.response.data) {
        alert(error.response.data.message);
      } else {
        alert('An error occurred. Please try again.');
      }
    }
  };
  
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setEditedActivity({
      ...editedActivity,
      [name]: value
    });
  };
  
  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex justify-center items-center">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-[#4d7b93]"></div>
      </div>
    );
  }
  
  if (error) {
    return (
      <div className="min-h-screen bg-gray-50 flex justify-center items-center">
        <div className="bg-white rounded-lg shadow-md p-6 max-w-md mx-auto text-center">
          <div className="text-red-500 mb-4">
            <X size={48} className="mx-auto" />
          </div>
          <h2 className="text-xl font-bold mb-2">Error</h2>
          <p className="text-gray-800 mb-6">{error}</p>
          <button
            onClick={() => navigate('/dashboard')}
            className="bg-[#4d7b93] text-white px-6 py-2 rounded-md hover:bg-[#3c6175] transition"
          >
            Back to Dashboard
          </button>
        </div>
      </div>
    );
  }
  
  if (!itinerary) {
    return (
      <div className="min-h-screen bg-gray-50 flex justify-center items-center">
        <div className="bg-white rounded-lg shadow-md p-6 max-w-md mx-auto text-center">
          <h2 className="text-xl font-bold mb-2">Itinerary Not Found</h2>
          <p className="text-gray-800 mb-6">The itinerary you're looking for does not exist or you don't have permission to view it.</p>
          <button
            onClick={() => navigate('/dashboard')}
            className="bg-[#4d7b93] text-white px-6 py-2 rounded-md hover:bg-[#3c6175] transition"
          >
            Back to Dashboard
          </button>
        </div>
      </div>
    );
  }
  
  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow-sm">
        <div className="container mx-auto px-4 py-4 flex justify-between items-center">
          <div className="flex items-center">
            <span className="text-2xl font-bold bg-gradient-to-r from-[#4d7b93] to-[#8351a8] text-transparent bg-clip-text">WanderPlan</span>
          </div>
          <nav>
            <ul className="flex space-x-6">
              <li><a href="/dashboard" className="text-gray-800 hover:text-[#4d7b93] transition">My Itineraries</a></li>
              <li><a href="/account" className="text-gray-800 hover:text-[#4d7b93] transition">Account</a></li>
            </ul>
          </nav>
        </div>
      </header>
      
      <main className="container mx-auto px-4 py-8">
        <button 
          onClick={() => navigate('/dashboard')}
          className="flex items-center text-gray-800 hover:text-gray-800 mb-6 transition"
        >
          <ArrowLeft size={18} className="mr-2" />
          Back to Dashboard
        </button>
        
        {/* Itinerary Header */}
        <div className="bg-white rounded-lg shadow-md p-6 mb-6">
          <div className="flex flex-col md:flex-row justify-between items-start md:items-center mb-6">
            <div>
              <h1 className="text-2xl font-bold">{itinerary.title}</h1>
              <div className="flex items-center mt-2">
                <MapPin size={16} className="text-gray-700 mr-1" />
                <span className="text-gray-800">{itinerary.destination}</span>
              </div>
            </div>
            
            <div className="flex mt-4 md:mt-0">
              <button
                onClick={handleShare}
                className="flex items-center mr-2 bg-gray-100 px-3 py-2 rounded-md hover:bg-gray-200 transition"
              >
                <Share2 size={16} className="mr-2" />
                Share
              </button>
              <button
                onClick={handleDownload}
                className="flex items-center bg-gray-100 px-3 py-2 rounded-md hover:bg-gray-200 transition"
              >
                <Download size={16} className="mr-2" />
                Download PDF
              </button>
            </div>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div>
              <span className="text-gray-700 text-sm">Dates</span>
              <div className="flex items-center mt-1">
                <Calendar size={16} className="text-gray-700 mr-2" />
                <span>{format(new Date(itinerary.startDate), 'MMM d')} - {format(new Date(itinerary.endDate), 'MMM d, yyyy')}</span>
              </div>
            </div>
            
            {itinerary.budget && (
              <div>
                <span className="text-gray-700 text-sm">Budget</span>
                <div className="flex items-center mt-1">
                  <DollarSign size={16} className="text-gray-700 mr-2" />
                  <span>${itinerary.budget}</span>
                </div>
              </div>
            )}
            
            <div>
              <span className="text-gray-700 text-sm">Pace</span>
              <div className="flex items-center mt-1">
                <Clock size={16} className="text-gray-700 mr-2" />
                <span>{itinerary.pace}</span>
              </div>
            </div>
          </div>
          
          <div className="mt-4">
            <span className="text-gray-700 text-sm">Interests</span>
            <div className="flex flex-wrap gap-2 mt-1">
              {itinerary.interests.map((interest, index) => (
                <span 
                  key={index}
                  className="bg-[#4d7b93]/10 text-[#4d7b93] text-sm px-2 py-1 rounded-md"
                >
                  {interest}
                </span>
              ))}
            </div>
          </div>
        </div>
        
        {/* Day Tabs */}
        <div className="flex overflow-x-auto pb-2 mb-4">
          {itinerary.days.map((day, index) => (
            <button
              key={index}
              onClick={() => setActiveDay(index)}
              className={`px-4 py-2 mr-2 rounded-md transition whitespace-nowrap ${
                activeDay === index
                  ? 'bg-[#4d7b93] text-white'
                  : 'bg-white text-gray-700 hover:bg-gray-100'
              }`}
            >
              Day {day.dayNumber} - {format(new Date(day.date), 'MMM d')}
            </button>
          ))}
        </div>
        
        {/* Itinerary Content */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          {/* Activities Column */}
          <div className="md:col-span-2 bg-white rounded-lg shadow-md p-6">
            <h2 className="text-xl font-bold mb-6">
              Day {itinerary.days[activeDay].dayNumber} - {format(new Date(itinerary.days[activeDay].date), 'EEEE, MMMM d')}
            </h2>
            
            {/* Morning Activity */}
            {itinerary.days[activeDay].activities.map((activity, activityIndex) => (
              <div key={activityIndex} className="mb-8">
                <div className="flex items-start">
                  <div className={`flex-shrink-0 w-10 h-10 rounded-full flex items-center justify-center mr-4 ${
                    activity.category === 'morning' 
                      ? 'bg-[#4d7b93]/10 text-[#4d7b93]' 
                      : activity.category === 'afternoon'
                        ? 'bg-[#8351a8]/10 text-[#8351a8]'
                        : 'bg-[#b45dbb]/10 text-[#b45dbb]'
                  }`}>
                    <span className="font-bold text-sm">
                      {activity.category === 'morning' 
                        ? 'AM' 
                        : activity.category === 'afternoon'
                          ? 'PM'
                          : 'EVE'}
                    </span>
                  </div>
                  
                  <div className="flex-grow">
                    <div className="flex justify-between items-start">
                      <h3 className="font-medium text-lg">{activity.title}</h3>
                      <div className="flex space-x-2">
                        <button
                          onClick={() => handleEditActivity(activeDay, activityIndex)}
                          className="text-gray-700 hover:text-[#4d7b93] transition"
                        >
                          <Edit size={14} />
                        </button>
                        
                        {subscription === 'premium' && (
                          <button
                            onClick={() => handleRegenerateActivity(activeDay, activityIndex)}
                            className="text-gray-700 hover:text-[#8351a8] transition"
                            title="Regenerate Activity (Premium)"
                          >
                            <RefreshCw size={14} />
                          </button>
                        )}
                      </div>
                    </div>
                    
                    <p className="text-gray-800 my-2">{activity.description}</p>
                    
                    <div className="flex flex-wrap gap-x-4 gap-y-2 text-sm text-gray-700">
                      <div className="flex items-center">
                        <Clock size={14} className="mr-1" />
                        <span>{activity.time}</span>
                      </div>
                      
                      {activity.duration && (
                        <div className="flex items-center">
                          <span>Duration: {activity.duration}</span>
                        </div>
                      )}
                      
                      {activity.cost && (
                        <div className="flex items-center">
                          <DollarSign size={14} className="mr-1" />
                          <span>{activity.cost}</span>
                        </div>
                      )}
                    </div>
                    
                    {activity.location && activity.location.address && (
                      <div className="flex items-center mt-2 text-sm text-gray-700">
                        <MapPin size={14} className="mr-1" />
                        <span>{activity.location.address}</span>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            ))}
            
            {subscription === 'premium' && (
              <button
                className="w-full flex items-center justify-center border border-dashed border-gray-300 rounded-md p-3 text-gray-700 hover:border-[#4d7b93] hover:text-[#4d7b93] transition"
              >
                <Plus size={16} className="mr-2" />
                Add Custom Activity
              </button>
            )}
          </div>
          
          {/* Map Column */}
          <div className="md:col-span-1 bg-white rounded-lg shadow-md p-4">
            {itinerary.days && itinerary.days[activeDay] && (
              <div className="h-64 rounded-lg mb-4">
                <MapView 
                  activities={itinerary.days[activeDay].activities} 
                  destination={itinerary.destination}
                />
              </div>
            )}
            
            <h3 className="font-medium mb-2">Location Overview</h3>
            <p className="text-sm text-gray-800 mb-4">This map shows all the locations you'll visit on Day {itinerary.days[activeDay].dayNumber}.</p>
            
            <div className="border-t border-gray-200 pt-4">
              <h3 className="font-medium mb-2">Weather Forecast</h3>
              <div className="flex items-center justify-between text-gray-800">
                <span>Partly Cloudy</span>
                <span>72°F / 22°C</span>
              </div>
              <p className="text-xs text-gray-700 mt-1">Weather data would be integrated in the full implementation</p>
            </div>
          </div>
        </div>
        
        {/* Premium Upgrade Banner (Free users only) */}
        {subscription === 'free' && (
          <div className="mt-8 bg-gradient-to-r from-[#4d7b93] to-[#8351a8] rounded-lg p-6 text-white">
            <div className="flex flex-col md:flex-row justify-between items-center">
              <div>
                <h2 className="text-xl font-bold mb-2">Unlock Premium Features</h2>
                <p className="mb-4 md:mb-0">Get unlimited itineraries, premium recommendations, and the ability to customize activities with Premium!</p>
              </div>
              <a 
                href="/upgrade"
                className="bg-white text-[#8351a8] px-6 py-2 rounded-md hover:bg-gray-100 transition font-medium"
              >
                Upgrade for $30/month
              </a>
            </div>
          </div>
        )}
      </main>
      
      {/* Edit Activity Modal */}
      {editMode && editedActivity && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-lg max-w-md w-full p-6">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-lg font-bold">Edit Activity</h3>
              <button
                onClick={() => {
                  setEditMode(false);
                  setEditedActivity(null);
                }}
                className="text-gray-700 hover:text-gray-700"
              >
                <X size={20} />
              </button>
            </div>
            
            <form>
              <div className="mb-4">
                <label className="block text-gray-700 mb-1 text-sm font-medium">Title</label>
                <input
                  type="text"
                  name="title"
                  value={editedActivity.title}
                  onChange={handleInputChange}
                  className="w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#4d7b93]"
                />
              </div>
              
              <div className="mb-4">
                <label className="block text-gray-700 mb-1 text-sm font-medium">Description</label>
                <textarea
                  name="description"
                  value={editedActivity.description}
                  onChange={handleInputChange}
                  rows={3}
                  className="w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#4d7b93]"
                ></textarea>
              </div>
              
              <div className="grid grid-cols-2 gap-4 mb-4">
                <div>
                  <label className="block text-gray-700 mb-1 text-sm font-medium">Time</label>
                  <input
                    type="text"
                    name="time"
                    value={editedActivity.time}
                    onChange={handleInputChange}
                    className="w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#4d7b93]"
                  />
                </div>
                
                <div>
                  <label className="block text-gray-700 mb-1 text-sm font-medium">Duration</label>
                  <input
                    type="text"
                    name="duration"
                    value={editedActivity.duration || ''}
                    onChange={handleInputChange}
                    className="w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#4d7b93]"
                  />
                </div>
              </div>
              
              <div className="grid grid-cols-2 gap-4 mb-4">
                <div>
                  <label className="block text-gray-700 mb-1 text-sm font-medium">Cost</label>
                  <input
                    type="text"
                    name="cost"
                    value={editedActivity.cost || ''}
                    onChange={handleInputChange}
                    className="w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#4d7b93]"
                  />
                </div>
                
                <div>
                  <label className="block text-gray-700 mb-1 text-sm font-medium">Category</label>
                  <select
                    name="category"
                    value={editedActivity.category}
                    onChange={handleInputChange}
                    className="w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#4d7b93]"
                  >
                    <option value="morning">Morning</option>
                    <option value="afternoon">Afternoon</option>
                    <option value="evening">Evening</option>
                  </select>
                </div>
              </div>
              
              <div className="mb-4">
                <label className="block text-gray-700 mb-1 text-sm font-medium">Location</label>
                <input
                  type="text"
                  name="location.address"
                  value={editedActivity.location?.address || ''}
                  onChange={(e) => setEditedActivity({
                    ...editedActivity,
                    location: {
                      ...editedActivity.location,
                      address: e.target.value
                    }
                  })}
                  className="w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#4d7b93]"
                />
              </div>
              
              <div className="flex justify-end space-x-3">
                <button
                  type="button"
                  onClick={() => {
                    setEditMode(false);
                    setEditedActivity(null);
                  }}
                  className="px-4 py-2 border border-gray-300 rounded-md hover:bg-gray-50 transition"
                >
                  Cancel
                </button>
                <button
                  type="button"
                  onClick={handleSaveActivity}
                  className="px-4 py-2 bg-[#4d7b93] text-white rounded-md hover:bg-[#3c6175] transition"
                >
                  Save Changes
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  );
};

export default ItineraryView;
